# =============================================================================
# HackScoreAI - Supabase ローカル開発環境設定ファイル
# =============================================================================
#
# 【役割と目的】
# - Supabase CLI によるローカル開発環境の構成管理
# - 本番環境と同等の機能をローカルで再現（PostgreSQL + Edge Functions + Auth など）
# - HackScoreAI の GitHub 解析・評価システムに必要な全サービスの設定
# 
# 【設定の適用範囲】
# - ローカル開発: `supabase start` で起動する全サービス
# - テスト環境: CI/CD での自動テスト実行
# - 本番環境: 一部設定（schema、migration など）が deploy 時に適用
#
# 【公式ドキュメント】
# https://supabase.com/docs/guides/local-development/cli/config
# =============================================================================

# プロジェクト識別子（同一ホスト上での複数プロジェクト区別用）
# `supabase init` 実行時のディレクトリ名がデフォルト値
project_id = "backend"

# =============================================================================
# API サーバー設定（PostgREST）
# =============================================================================
# REST API 経由でのデータベースアクセスを提供
# HackScoreAI では主に管理画面やメタデータ取得に使用
[api]
enabled = true

# API サーバーのポート番号
# フロントエンド（localhost:3000）からアクセスする際の接続先
port = 54321

# API として公開するデータベーススキーマ
# - public: メインのアプリケーションテーブル
# - graphql_public: GraphQL エンドポイント用
# - pgmq: PostgreSQL Message Queue（ジョブキュー機能）
schemas = ["public", "graphql_public", "pgmq"]

# 全リクエストで検索対象とするスキーマパス
# 関数やビューの名前解決で使用される優先順位
extra_search_path = ["public", "extensions"]

# 1回のリクエストで返す最大行数
# 意図しない大量データ取得やメモリ不足を防ぐセーフティネット
max_rows = 1000

[api.tls]
# Enable HTTPS endpoints locally using a self-signed certificate.
enabled = false

# =============================================================================
# PostgreSQL データベース設定
# =============================================================================
# HackScoreAI のメインデータストア
# リポジトリ情報、評価結果、ユーザー設定などを保存
[db]
# PostgreSQL サーバーのポート番号
# 直接 SQL 接続やマイグレーション実行時に使用
port = 54322

# スキーマ差分検出用のシャドウデータベースポート
# `supabase db diff` コマンドで使用
shadow_port = 54320

# PostgreSQL のメジャーバージョン
# 本番環境と必ず一致させる必要がある（本番: `SHOW server_version;` で確認）
major_version = 17

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 54329
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

# データベース内暗号化機能（Supabase Vault）
# Claude API キーや GitHub トークンなどの機密情報を暗号化保存
[db.vault]
secret_key = "env(VAULT_SECRET_KEY)"

# Specifies an ordered list of schema files that describe your database.
# Supports glob patterns relative to supabase directory: "./schemas/*.sql"
# schema_paths = []

# データベース初期データ投入設定
# 開発・テスト用のサンプルデータを自動投入
[db.seed]
# db reset 時の初期データ投入を有効化
# 開発効率向上のため推奨設定
enabled = true

# 初期データファイルのパス指定
# HackScoreAI では評価基準のマスターデータなどを投入
sql_paths = ["./seed.sql"]

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv4)
# ip_version = "IPv6"
# The maximum length in bytes of HTTP request headers. (default: 4096)
# max_header_length = 4096

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1"
# OpenAI API Key to use for Supabase AI in the Supabase Studio.
openai_api_key = "env(OPENAI_API_KEY)"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326
# admin_email = "admin@email.com"
# sender_name = "Admin"

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

# Image transformation API is available to Supabase Pro plan.
# [storage.image_transformation]
# enabled = true

# Uncomment to configure local storage buckets
# [storage.buckets.images]
# public = false
# file_size_limit = "50MiB"
# allowed_mime_types = ["image/png", "image/jpeg"]
# objects_path = "./images"

# =============================================================================
# 認証システム設定（Supabase Auth）
# =============================================================================
# HackScoreAI のユーザー認証・セッション管理
# GitHub OAuth による SSO ログインを主要機能として使用
[auth]
enabled = true

# フロントエンドのベース URL
# リダイレクト許可リストとメール内 URL 生成に使用
site_url = "http://localhost:3000"

# 認証後リダイレクト許可 URL の厳密指定
# セキュリティ上、完全一致のみ許可（ワイルドカード不可）
additional_redirect_urls = ["http://localhost:3000", "http://localhost:3000/auth/callback"]

# JWT トークンの有効期限（秒）
# 1時間（3600秒）〜 1週間（604800秒）の範囲で設定可能
jwt_expiry = 3600

# リフレッシュトークンのローテーション機能
# セキュリティ向上のため有効化推奨
enable_refresh_token_rotation = true

# リフレッシュトークンの期限切れ後再利用可能時間（秒）
# トークンローテーション有効時のみ機能
refresh_token_reuse_interval = 10

# 新規ユーザー登録の許可
# HackScoreAI では GitHub OAuth のみなので実質未使用
enable_signup = true

# 匿名ログインの許可（無効）
# セキュリティとトレーサビリティのため無効化
enable_anonymous_sign_ins = false

# アカウント手動リンクのテスト許可（無効）
# 本番環境では不要な機能
enable_manual_linking = false

# パスワード最小長（6文字）
# GitHub OAuth メインのため最小設定
minimum_password_length = 6

# パスワード強度要件（未設定）
# GitHub OAuth メインのため要件なし
password_requirements = ""

[auth.rate_limit]
# Number of emails that can be sent per hour. Requires auth.email.smtp to be enabled.
email_sent = 2
# Number of SMS messages that can be sent per hour. Requires auth.sms to be enabled.
sms_sent = 30
# Number of anonymous sign-ins that can be made per hour per IP address. Requires enable_anonymous_sign_ins = true.
anonymous_users = 30
# Number of sessions that can be refreshed in a 5 minute interval per IP address.
token_refresh = 150
# Number of sign up and sign-in requests that can be made in a 5 minute interval per IP address (excludes anonymous users).
sign_in_sign_ups = 30
# Number of OTP / Magic link verifications that can be made in a 5 minute interval per IP address.
token_verifications = 30
# Number of Web3 logins that can be made in a 5 minute interval per IP address.
web3 = 30

# Configure one of the supported captcha providers: `hcaptcha`, `turnstile`.
# [auth.captcha]
# enabled = true
# provider = "hcaptcha"
# secret = ""

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = false
# If enabled, users will need to reauthenticate or have logged in recently to change their password.
secure_password_change = false
# Controls the minimum amount of time that must pass before sending another signup confirmation or password reset email.
max_frequency = "1s"
# Number of characters used in the email OTP.
otp_length = 6
# Number of seconds before the email OTP expires (defaults to 1 hour).
otp_expiry = 3600

# Use a production-ready SMTP server
# [auth.email.smtp]
# enabled = true
# host = "smtp.sendgrid.net"
# port = 587
# user = "apikey"
# pass = "env(SENDGRID_API_KEY)"
# admin_email = "admin@email.com"
# sender_name = "Admin"

# Uncomment to customize email template
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = false
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false
# Template for sending OTP to users
template = "Your code is {{ .Code }}"
# Controls the minimum amount of time that must pass before sending another sms otp.
max_frequency = "5s"

# Use pre-defined map of phone number to OTP for testing.
# [auth.sms.test_otp]
# 4152127777 = "123456"

# Configure logged in session timeouts.
# [auth.sessions]
# Force log out after the specified duration.
# timebox = "24h"
# Force log out if the user has been inactive longer than the specified duration.
# inactivity_timeout = "8h"

# This hook runs before a token is issued and allows you to add additional claims based on the authentication method used.
# [auth.hook.custom_access_token]
# enabled = true
# uri = "pg-functions://<database>/<schema>/<hook_name>"

# Configure one of the supported SMS providers: `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
[auth.sms.twilio]
enabled = false
account_sid = ""
message_service_sid = ""
# DO NOT commit your Twilio auth token to git. Use environment variable substitution instead:
auth_token = "env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)"

# Multi-factor-authentication is available to Supabase Pro plan.
[auth.mfa]
# Control how many MFA factors can be enrolled at once per user.
max_enrolled_factors = 10

# Control MFA via App Authenticator (TOTP)
[auth.mfa.totp]
enroll_enabled = false
verify_enabled = false

# Configure MFA via Phone Messaging
[auth.mfa.phone]
enroll_enabled = false
verify_enabled = false
otp_length = 6
template = "Your code is {{ .Code }}"
max_frequency = "5s"

# Configure MFA via WebAuthn
# [auth.mfa.web_authn]
# enroll_enabled = true
# verify_enabled = true

# Use an external OAuth provider. The full list of providers are: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = ""
# DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:
secret = "env(SUPABASE_AUTH_EXTERNAL_APPLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = ""
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = ""
# If enabled, the nonce check will be skipped. Required for local sign in with Google auth.
skip_nonce_check = false

# GitHub OAuth 設定
# HackScoreAI のメイン認証方式
# GitHub アカウントでのシングルサインオン（SSO）を提供
[auth.external.github]
enabled = true

# GitHub OAuth App のクライアント ID
# GitHub Developer Settings で取得した値を環境変数で設定
client_id = "env(GITHUB_CLIENT_ID)"

# GitHub OAuth App のクライアントシークレット
# セキュリティ上、環境変数での管理必須
secret = "env(GITHUB_CLIENT_SECRET)"

# カスタムリダイレクト URI（未使用）
# デフォルト設定で site_url + additional_redirect_urls を使用
redirect_uri = ""

# カスタム GitHub URL（未使用）
# GitHub Enterprise Server 利用時のみ設定
url = ""

# Allow Solana wallet holders to sign in to your project via the Sign in with Solana (SIWS, EIP-4361) standard.
# You can configure "web3" rate limit in the [auth.rate_limit] section and set up [auth.captcha] if self-hosting.
[auth.web3.solana]
enabled = false

# Use Firebase Auth as a third-party provider alongside Supabase Auth.
[auth.third_party.firebase]
enabled = false
# project_id = "my-firebase-project"

# Use Auth0 as a third-party provider alongside Supabase Auth.
[auth.third_party.auth0]
enabled = false
# tenant = "my-auth0-tenant"
# tenant_region = "us"

# Use AWS Cognito (Amplify) as a third-party provider alongside Supabase Auth.
[auth.third_party.aws_cognito]
enabled = false
# user_pool_id = "my-user-pool-id"
# user_pool_region = "us-east-1"

# Use Clerk as a third-party provider alongside Supabase Auth.
[auth.third_party.clerk]
enabled = false
# Obtain from https://clerk.com/setup/supabase
# domain = "example.clerk.accounts.dev"

# =============================================================================
# Edge Functions ランタイム設定（Deno）
# =============================================================================
# HackScoreAI のバックエンド API（Hono）実行環境
# Claude Code による GitHub リポジトリ解析処理を実行
[edge_runtime]
enabled = true

# リクエスト処理ポリシー
# - oneshot: ホットリロード対応（開発用）
# - per_worker: ワーカープロセス分離（負荷テスト用）
policy = "oneshot"

# Chrome DevTools デバッガー用ポート
# Edge Functions のデバッグ・プロファイリングに使用
inspector_port = 8083

# Deno ランタイムのメジャーバージョン
# Supabase 本番環境と一致させる必要がある
deno_version = 1

# Edge Functions で使用する環境変数・シークレット
# HackScoreAI では外部ワーカーとの連携に使用
[edge_runtime.secrets]
# Cloud Run ワーカーの URL（将来的な拡張用）
CLOUD_RUN_WORKER_URL = "env(CLOUD_RUN_WORKER_URL)"

# Cloud Run ワーカー認証トークン（将来的な拡張用）
CLOUD_RUN_AUTH_TOKEN = "env(CLOUD_RUN_AUTH_TOKEN)"

[analytics]
enabled = true
port = 54327
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage engine to use OrioleDB (S3)
orioledb_version = ""
# Configures S3 bucket URL, eg. <bucket_name>.s3-<region>.amazonaws.com
s3_host = "env(S3_HOST)"
# Configures S3 bucket region, eg. us-east-1
s3_region = "env(S3_REGION)"
# Configures AWS_ACCESS_KEY_ID for S3 bucket
s3_access_key = "env(S3_ACCESS_KEY)"
# Configures AWS_SECRET_ACCESS_KEY for S3 bucket
s3_secret_key = "env(S3_SECRET_KEY)"
