import express from "express";
import { createClient } from "@supabase/supabase-js";
import { query } from "@anthropic-ai/claude-code";
import "dotenv/config";

const app = express();
app.use(express.json());

// Environment variables validation
const requiredEnvVars = [
  "SUPABASE_URL",
  "SUPABASE_SERVICE_ROLE_KEY",
  "CLOUD_RUN_AUTH_TOKEN",
];

for (const envVar of requiredEnvVars) {
  if (!process.env[envVar]) {
    console.error(`‚ùå Missing required environment variable: ${envVar}`);
    process.exit(1);
  }
}

// Configuration from environment variables
const config = {
  supabase: {
    url: process.env.SUPABASE_URL,
    serviceRoleKey: process.env.SUPABASE_SERVICE_ROLE_KEY,
  },
  server: {
    port: parseInt(process.env.PORT) || 8080,
    nodeEnv: process.env.NODE_ENV || "development",
  },
  auth: {
    token: process.env.CLOUD_RUN_AUTH_TOKEN,
  },
  processing: {
    maxTurns: parseInt(process.env.MAX_TURNS_PER_ANALYSIS) || 50,
    timeoutMs: parseInt(process.env.ANALYSIS_TIMEOUT_MS) || 300000,
  },
  logging: {
    level: process.env.LOG_LEVEL || "info",
  },
  cost: {
    estimatedCostPerToken:
      parseFloat(process.env.ESTIMATED_COST_PER_TOKEN) || 0.000003,
  },
};

const supabase = createClient(
  config.supabase.url,
  config.supabase.serviceRoleKey
);

// Middleware for authentication
const authenticateRequest = (req, res, next) => {
  const authHeader = req.headers.authorization;
  const token = authHeader && authHeader.split(" ")[1]; // Bearer TOKEN

  if (!token || token !== config.auth.token) {
    return res.status(401).json({
      success: false,
      error: "Unauthorized",
    });
  }

  next();
};

// Health check (no auth required)
app.get("/health", (req, res) => {
  console.log(`üè• Health check request received from ${req.ip}`);
  res.json({
    status: "ok",
    service: "claudecode-worker",
    version: "1.0.0",
    environment: config.server.nodeEnv,
    timestamp: new Date().toISOString(),
    config: {
      maxTurns: config.processing.maxTurns,
      timeoutMs: config.processing.timeoutMs,
    },
  });
});

// Simple test endpoint
app.get("/test", (req, res) => {
  console.log(`üß™ Test request received from ${req.ip}`);
  res.send("Hello from Cloud Run Worker!");
});

// Process single repository (HTTP trigger) - requires authentication
app.post("/process", authenticateRequest, async (req, res) => {
  try {
    console.log("üîç Request body received:", JSON.stringify(req.body, null, 2));
    const { repository, userId, evaluationCriteria, jobId, hackathonId } =
      req.body;

    console.log(
      `üîç Processing job ${jobId} for hackathon ${hackathonId} with repository:`,
      repository
    );

    // Ensure job_status record exists
    await ensureJobStatus(jobId, userId, { ...req.body, hackathonId });

    // Get user secrets directly from Supabase Vault (secure)
    const secrets = await getUserSecrets(userId);

    // Process the single repository with ClaudeCode
    const result = await processRepositoryWithClaudeCode(
      repository,
      secrets,
      evaluationCriteria
    );

    if (result.success) {
      try {
        console.log(`üíæ Saving evaluation result for ${repository}...`);
        console.log(`üíæ Job ID: ${jobId}, User ID: ${userId}`);
        console.log(
          `üíæ Evaluation data:`,
          JSON.stringify(result.evaluation, null, 2)
        );

        // Save to Supabase database
        const saveResult = await saveEvaluationResult(
          jobId,
          userId,
          repository,
          result.evaluation,
          result.metadata
        );

        console.log(
          `‚úÖ Successfully saved evaluation result for ${repository}:`,
          saveResult
        );
      } catch (saveError) {
        console.error(
          `‚ùå Failed to save evaluation result for ${repository}:`,
          saveError
        );
        console.error(
          `‚ùå Save error details:`,
          saveError.message,
          saveError.stack
        );
        result.success = false;
        result.error = `Failed to save evaluation: ${saveError.message}`;
      }
    }

    // Update job status in Supabase
    const status = result.success ? "completed" : "failed";
    console.log(`üìù Updating job status to "${status}" for job ${jobId}...`);

    try {
      await updateJobStatus(jobId, status, {
        repository,
        success: result.success,
        error: result.error,
        totalScore: result.evaluation?.totalScore,
      });
      console.log(
        `‚úÖ Successfully updated job status to "${status}" for job ${jobId}`
      );
    } catch (statusError) {
      console.error(
        `‚ùå Failed to update job status for ${jobId}:`,
        statusError
      );
      console.error(
        `‚ùå Status error details:`,
        statusError.message,
        statusError.stack
      );
    }

    res.json({
      success: true,
      jobId,
      hackathonId,
      repository,
      result: {
        success: result.success,
        error: result.error,
        totalScore: result.evaluation?.totalScore,
      },
    });
  } catch (error) {
    console.error("Error processing job:", error);

    if (req.body.jobId) {
      await updateJobStatus(req.body.jobId, "failed", { error: error.message });
    }

    res.status(500).json({
      success: false,
      error: error.message,
    });
  }
});

// Poll Supabase queue and process jobs - requires authentication
app.post("/poll", authenticateRequest, async (req, res) => {
  try {
    console.log("üì• Starting continuous polling for jobs...");
    let processedCount = 0;
    let processedJobs = [];
    let hasErrors = false;
    let lastError = null;

    // Check initial queue state for debugging
    const { data: initialQueueStats } = await supabase.rpc("pgmq_metrics", {
      queue_name: "repo_analysis_queue",
    });
    console.log("üìä Initial queue state:", initialQueueStats);

    while (true) {
      console.log(`üîÑ Polling iteration ${processedCount + 1}...`);

      // Read from pgmq queue with extended timeout
      console.log("üîç Reading from pgmq queue with params:", {
        queue_name: "repo_analysis_queue",
        visibility_timeout: 1800, // 30ÂàÜ„Å´Â§ßÂπÖÂª∂Èï∑ÔºàÂá¶ÁêÜÊôÇÈñì‰ΩôË£ï„ÇíËÄÉÊÖÆÔºâ
        qty: 1,
      });

      const { data: messages, error } = await supabase.rpc("pgmq_read", {
        queue_name: "repo_analysis_queue",
        visibility_timeout: 1800, // 30ÂàÜ„Å´Â§ßÂπÖÂª∂Èï∑ÔºàÂá¶ÁêÜÊôÇÈñì‰ΩôË£ï„ÇíËÄÉÊÖÆÔºâ
        qty: 1,
      });

      console.log("üîç Queue read result:", {
        messages: messages ? messages.length : 0,
        error: error?.message || null,
        firstMessageId:
          messages && messages.length > 0 ? messages[0].msg_id : null,
      });

      if (error) {
        console.error("‚ùå Queue read error details:", error);
        hasErrors = true;
        lastError = `Queue read error: ${error.message}`;
        break;
      }

      if (!messages || messages.length === 0) {
        console.log(
          `‚ÑπÔ∏è No more messages in queue - processed ${processedCount} jobs total`
        );

        // Log final queue state for debugging
        const { data: finalQueueStats } = await supabase.rpc("pgmq_metrics", {
          queue_name: "repo_analysis_queue",
        });
        console.log("üìä Final queue state:", finalQueueStats);
        break;
      }

      const message = messages[0];
      console.log("üì® Processing message:", message.msg_id);
      console.log(
        "üîç Message content:",
        JSON.stringify(message.message, null, 2)
      );

      // Update job status to processing
      await updateJobStatus(message.message.jobId, "processing");

      let messageHandled = false;

      try {
        // Process the job
        console.log(
          `üöÄ Starting processing for job ${message.message.jobId}...`
        );
        const processResult = await fetch(
          `http://localhost:${config.server.port}/process`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${config.auth.token}`,
            },
            body: JSON.stringify(message.message),
          }
        );

        if (processResult.ok) {
          console.log(
            `‚úÖ Job ${message.message.jobId} processing completed successfully`
          );

          // Delete message from queue on success with verification
          console.log(`üóëÔ∏è Deleting message ${message.msg_id} from queue...`);
          const { data: deleteResult, error: deleteError } = await supabase.rpc(
            "pgmq_delete",
            {
              queue_name: "repo_analysis_queue",
              msg_id: message.msg_id,
            }
          );

          if (deleteError) {
            console.error(
              `‚ùå Failed to delete message ${message.msg_id}:`,
              deleteError
            );
            hasErrors = true;
            lastError = `Delete failed: ${deleteError.message}`;
          } else {
            console.log(
              `‚úÖ Successfully deleted message ${message.msg_id}, result:`,
              deleteResult
            );
            messageHandled = true;
          }

          console.log(`‚úÖ Successfully processed job ${message.message.jobId}`);
          processedJobs.push({
            messageId: message.msg_id,
            jobId: message.message.jobId,
            deleted: !deleteError,
          });
          processedCount++;
        } else {
          const errorText = await processResult.text();
          console.error(
            `‚ùå Job ${message.message.jobId} processing failed with status: ${processResult.status}, response: ${errorText}`
          );

          // Update job status to failed
          await updateJobStatus(message.message.jobId, "failed", {
            error: `Process endpoint returned status ${processResult.status}: ${errorText}`,
          });

          // Archive failed message with verification
          console.log(`üì¶ Archiving failed message ${message.msg_id}...`);
          const { data: archiveResult, error: archiveError } =
            await supabase.rpc("pgmq_archive", {
              queue_name: "repo_analysis_queue",
              msg_id: message.msg_id,
            });

          if (archiveError) {
            console.error(
              `‚ùå Failed to archive message ${message.msg_id}:`,
              archiveError
            );
          } else {
            console.log(
              `‚úÖ Successfully archived message ${message.msg_id}, result:`,
              archiveResult
            );
            messageHandled = true;
          }

          hasErrors = true;
          lastError = `Process failed with status: ${processResult.status}`;
        }
      } catch (processError) {
        console.error(
          `‚ùå Job ${message.message.jobId} processing exception:`,
          processError
        );

        // Update job status to failed
        await updateJobStatus(message.message.jobId, "failed", {
          error: processError.message || "Unknown processing error",
        });

        // Archive failed message with verification
        console.log(`üì¶ Archiving exception message ${message.msg_id}...`);
        const { data: archiveResult, error: archiveError } = await supabase.rpc(
          "pgmq_archive",
          {
            queue_name: "repo_analysis_queue",
            msg_id: message.msg_id,
          }
        );

        if (archiveError) {
          console.error(
            `‚ùå Failed to archive message ${message.msg_id}:`,
            archiveError
          );
        } else {
          console.log(
            `‚úÖ Successfully archived message ${message.msg_id}, result:`,
            archiveResult
          );
          messageHandled = true;
        }

        hasErrors = true;
        lastError = processError.message;
      }

      // If message wasn't properly handled, we need to break to avoid infinite loop
      if (!messageHandled) {
        console.error(
          `‚ö†Ô∏è Message ${message.msg_id} was not properly handled (not deleted or archived), breaking to avoid infinite loop`
        );
        hasErrors = true;
        lastError = `Message ${message.msg_id} handling failed`;
        break;
      }

      // Check queue state after processing for debugging
      const { data: midQueueStats } = await supabase.rpc("pgmq_metrics", {
        queue_name: "repo_analysis_queue",
      });
      console.log(
        `üìä Queue state after processing job ${message.message.jobId}:`,
        midQueueStats
      );

      // Small delay between processing jobs to prevent overwhelming
      await new Promise((resolve) => setTimeout(resolve, 2000));
    }

    // Return summary of all processed jobs
    const response = {
      success: true,
      processedCount,
      processedJobs,
      hasErrors,
      lastError,
      message:
        processedCount === 0
          ? "No jobs in queue"
          : `Processed ${processedCount} jobs from queue`,
    };

    console.log("üìä Polling session completed:", response);
    res.json(response);
  } catch (error) {
    console.error("Polling error:", error);
    res.status(500).json({
      success: false,
      error: error.message,
    });
  }
});

async function getUserSecrets(userId) {
  console.log(`üîë Retrieving secrets for user: ${userId}`);

  const { data: anthropicKey, error: anthropicError } = await supabase.rpc(
    "get_secret_for_job",
    {
      p_user_id: userId,
      p_secret_type: "anthropic_key",
    }
  );

  if (anthropicError) {
    console.error("‚ùå Failed to retrieve Anthropic API key:", anthropicError);
    throw new Error(
      `Failed to retrieve Anthropic API key: ${anthropicError.message}`
    );
  }

  if (!anthropicKey) {
    console.error("‚ùå Anthropic API key not found for user:", userId);
    throw new Error(
      "Anthropic API key not found. Please save your key in the settings page."
    );
  }

  // Log partial key for debugging (first 10 chars only)
  console.log(
    `‚úÖ Anthropic API key retrieved: ${anthropicKey.substring(0, 10)}...`
  );

  const { data: githubToken, error: githubError } = await supabase.rpc(
    "get_secret_for_job",
    {
      p_user_id: userId,
      p_secret_type: "github_token",
    }
  );

  if (githubError) {
    console.error("‚ùå Failed to retrieve GitHub token:", githubError);
    throw new Error(`Failed to retrieve GitHub token: ${githubError.message}`);
  }

  return { anthropicKey, githubToken };
}

async function processRepositoryWithClaudeCode(
  repoName,
  secrets,
  evaluationCriteria
) {
  let timeoutId;

  try {
    console.log(`üîç Analyzing repository: ${repoName}`);

    // const prompt = buildAnalysisPrompt_simple(repoName, evaluationCriteria);
    const prompt = buildAnalysisPrompt_simple(repoName, evaluationCriteria);
    const abortController = new AbortController();

    // „Çø„Ç§„É†„Ç¢„Ç¶„ÉàË®≠ÂÆö
    timeoutId = setTimeout(() => {
      console.log(`‚è∞ Analysis timeout for ${repoName}, aborting...`);
      abortController.abort();
    }, config.processing.timeoutMs);

    // Validate API key before proceeding
    if (!secrets.anthropicKey) {
      throw new Error("Anthropic API key is missing");
    }

    console.log(
      `üîê Using API key: ${secrets.anthropicKey.substring(
        0,
        10
      )}... for Claude Code`
    );

    const queryOptions = {
      prompt,
      abortController,
      options: {
        maxTurns: config.processing.maxTurns,
        apiKey: secrets.anthropicKey,
        mcpServers: {
          github: {
            command: "npx",
            args: ["-y", "@modelcontextprotocol/server-github"],
            env: {
              GITHUB_PERSONAL_ACCESS_TOKEN: secrets.githubToken,
            },
          },
        },
        allowedTools: [
          "mcp__github__get_file_contents",
          "mcp__github__search_repositories",
          "mcp__github__search_code",
          "mcp__github__list_commits",
          "mcp__github__get_repository_structure",
          "mcp__github__list_repository_contents",
        ],
      },
    };

    let evaluationResult = null;
    let numTurns = 0;
    let totalCostUsd = 0;

    for await (const message of query(queryOptions)) {
      numTurns++;

      if (message.type === "assistant") {
        console.log(`Turn ${numTurns}: Assistant response`);

        let contentText = "";
        if (typeof message.message.content === "string") {
          contentText = message.message.content;
        } else if (Array.isArray(message.message.content)) {
          contentText = message.message.content
            .filter((item) => item.type === "text")
            .map((item) => item.text)
            .join("");
        }

        const extractedJson = extractJsonFromText(contentText);
        if (extractedJson && validateEvaluationResult(extractedJson)) {
          evaluationResult = extractedJson;
          console.log(
            "‚úÖ Valid evaluation result JSON detected - continuing to completion"
          );
          // break„ÇíÂâäÈô§ - Claude Code SDK„ÅÆÊ≠£Â∏∏ÂÆå‰∫Ü„ÇíÂæÖ„Å§
        }
      } else if (message.type === "result") {
        if (message.subtype === "success") {
          numTurns = message.num_turns;
          totalCostUsd = message.total_cost_usd;
          console.log(
            `üìä Analysis completed - Turns: ${numTurns}, Cost: $${totalCostUsd.toFixed(
              4
            )}`
          );
        } else {
          throw new Error(`Analysis failed: ${message.subtype}`);
        }
      }
    }

    // „Çø„Ç§„É†„Ç¢„Ç¶„Éà„Çí„ÇØ„É™„Ç¢
    clearTimeout(timeoutId);

    if (!evaluationResult) {
      throw new Error("No valid evaluation result found");
    }

    return {
      success: true,
      evaluation: evaluationResult,
      metadata: { numTurns, totalCostUsd },
    };
  } catch (error) {
    console.error(`‚ùå Error analyzing ${repoName}:`, error);

    // Claude Code process exit error
    if (error.message.includes("exited with code 1")) {
      console.error("‚ùå Claude Code process failed. Common causes:");
      console.error("  - Invalid or missing Anthropic API key");
      console.error("  - API key doesn't have Claude Code access");
      console.error("  - Network connectivity issues");
      return {
        success: false,
        error:
          "Claude Code process failed. Please check: 1) Your Anthropic API key is valid and saved in settings, 2) Your API key has Claude Code access, 3) Network connectivity",
      };
    }

    // „Ç®„É©„Éº„Ç≥„Éº„Éâ143„ÅÆÂ†¥Âêà„ÅØÁâπÂà•„Å™Âá¶ÁêÜ
    if (error.message.includes("exited with code 143")) {
      console.log(
        `‚ö†Ô∏è  Repository ${repoName} analysis was terminated (possibly due to timeout)`
      );
      return {
        success: false,
        error:
          "Analysis timed out or was terminated. Try reducing MAX_TURNS_PER_ANALYSIS or increasing ANALYSIS_TIMEOUT_MS.",
      };
    }

    return {
      success: false,
      error: error.message,
    };
  } finally {
    // ÂøÖ„Åö„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Çí„ÇØ„É™„Ç¢
    if (timeoutId) {
      clearTimeout(timeoutId);
    }
  }
}

function buildAnalysisPrompt(repoName, evaluationCriteria) {
  return `
GitHub MCP „Çí‰ΩøÁî®„Åó„Å¶„ÄÅGitHub „É™„Éù„Ç∏„Éà„É™ "${repoName}" „ÇíË©≥Á¥∞„Å´ÂàÜÊûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÂøÖ„ÅöÂÆüÈöõ„Å´„Éï„Ç°„Ç§„É´„ÅÆÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åã„ÇâÂàÜÊûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

[IMPORTANT]
ÂèØËÉΩ„Å™Èôê„ÇäÂ∞ë„Å™„ÅÑ„Çø„Éº„É≥Êï∞„ÅßÂàÜÊûê„ÇíË°å„ÅÜ„Åü„ÇÅ„Å´„ÄÅÂ∑•Â§´„Çí„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
ÂøÖ„Åö‰∏ªË¶Å„Å™„Éï„Ç°„Ç§„É´„ÇíË¶ãÊ•µ„ÇÅ„Çã„Åì„Å®„Åß„Ç≥„É≥„ÉÜ„É≥„ÉÑÂèñÂæó„ÅÆ„Çø„Éº„É≥Êï∞„ÇíÊ∏õ„Çâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
„Åü„Å†„Åó„ÄÅ**ÂàÜÊûêÁµêÊûú„ÅÆÁ≤æÂ∫¶„ÅØËêΩ„Å®„Åó„Å¶„ÅØ„ÅÑ„Åë„Åæ„Åõ„Çì**„ÅÆ„Åß„ÄÅ‰∏ªË¶Å„Å™„Éï„Ç°„Ç§„É´„ÇíË¶ãÊ•µ„ÇÅ„ÅØÊÖéÈáç„Å´Ë°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

**Âà©Áî®ÂèØËÉΩ„Å™„ÉÑ„Éº„É´:**
- mcp__github__get_file_contents: „Éï„Ç°„Ç§„É´„ÅÆÂÜÖÂÆπ„ÇíÂèñÂæó
- mcp__github__search_repositories: „É™„Éù„Ç∏„Éà„É™„ÇíÊ§úÁ¥¢
- mcp__github__search_code: „Ç≥„Éº„Éâ„ÇíÊ§úÁ¥¢
- mcp__github__list_commits: „Ç≥„Éü„ÉÉ„ÉàÂ±•Ê≠¥„ÇíÂèñÂæó
- mcp__github__get_repository_structure: „É™„Éù„Ç∏„Éà„É™„ÅÆÊßãÈÄ†„ÇíÂèñÂæó
- mcp__github__list_repository_contents: „É™„Éù„Ç∏„Éà„É™„ÅÆÂÜÖÂÆπ„ÇíÂèñÂæó

**ÂàÜÊûêÊâãÈ†Ü:**
1. „É™„Éù„Ç∏„Éà„É™„ÅÆÂü∫Êú¨ÊßãÈÄ†„ÇíÂèñÂæó„Åó„Å¶„ÄÅ„Å©„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÈáçË¶Å„Åã„ÇíÂà§Êñ≠
2. README„ÄÅpackage.json„ÄÅrequirements.txtÁ≠â„ÅÆË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇíÁ¢∫Ë™ç
3. src/, lib/, app/Á≠â„ÅÆ„É°„Ç§„É≥„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ‰∏ªË¶Å„Å™„Éï„Ç°„Ç§„É´‰∏ÄË¶ß„ÇíÂèñÂæó
4. ‰∏ªË¶Å„Å™„ÇΩ„Éº„Çπ„Ç≥„Éº„Éâ„Éï„Ç°„Ç§„É´„ÅÆÂÜÖÂÆπ„ÇíË™≠„ÅøÂèñ„Çä
5. Ë©ï‰æ°„Åô„Çã

**Âá∫ÂäõÂΩ¢ÂºèÔºàÊó•Êú¨Ë™û„ÅßÂõûÁ≠îÔºâ:**

{
  "totalScore": 18,                // 0-20 „ÅÆÊï¥Êï∞
  "items": [
    {
      "id": "1",
      "name": "„ÉÜ„Éº„ÉûÈÅ©ÂêàÂ∫¶",        // Ë©ï‰æ°È†ÖÁõÆ„É©„Éô„É´
      "score": 4,                  // Êï¥Êï∞ÔºàÈÖçÂàÜÂÜÖ 0-5Ôºâ
      "positives": "...",        // ËâØ„Åã„Å£„ÅüÁÇπ (1-3 ‰ª∂„Çí„Çè„Åã„Çä„ÇÑ„Åô„ÅÑÊñáÁ´†„ÅßË®òËºâ)
      "negatives": "..."         // ÊîπÂñÑÁÇπ (1-3 ‰ª∂„Çí„Çè„Åã„Çä„ÇÑ„Åô„ÅÑÊñáÁ´†„ÅßË®òËºâ)
    },
    ...
    {
      "id": "7",
      "name": "„Éâ„Ç≠„É•„É°„É≥„Éà",
      "score": 2,
      "positives": "...",
      "negatives": "..."
    }
  ],
  "overallComment": "Á∑èÂêàÁöÑ„Å´Ë¶ã„Çã„Å®..." // Á∑èÂêàÁöÑ„Å´Ë¶ã„Å¶„Å©„ÅÜ„Å†„Å£„Åü„Åã„Çí„Çè„Åã„Çä„ÇÑ„Åô„ÅÑÊñáÁ´†„ÅßË®òËºâ„ÄÅ„Åì„Åì„ÅØÈï∑Êñá„Å®„Å™„Å£„Å¶„ÇÇ„ÅÑ„ÅÑ„ÅÆ„ÅßË©≥Á¥∞„Å´Ë®òËºâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
}

## Ë©ï‰æ°È†ÖÁõÆ
### Ë©ï‰æ°È†ÖÁõÆ\_1
„ÉÜ„Éº„ÉûÈÅ©ÂêàÂ∫¶
#### ÈÖçÂàÜ
5 ÁÇπ
#### ‰∏ª„Å™Ë©ï‰æ°Ëª∏
‰∏é„Åà„Çâ„Çå„Åü„ÉÜ„Éº„Éû„ÇÑË™≤È°å„Å´ÂØæ„Åó„Å¶„Å©„Çå„Å†„ÅëÁöÑÁ¢∫„Å´Âøú„Åà„Å¶„ÅÑ„Çã„Åã

### Ë©ï‰æ°È†ÖÁõÆ\_2
Áã¨ÂâµÊÄß„ÉªÈù©Êñ∞ÊÄß
#### ÈÖçÂàÜ
5 ÁÇπ
#### ‰∏ª„Å™Ë©ï‰æ°Ëª∏
Êó¢Â≠ò„ÅÆËß£Ê±∫Á≠ñ„Å®„ÅÆÂ∑ÆÂà•Âåñ„ÄÅÊñ∞Â•áÊÄß„ÄÅ„Ç¢„Ç§„Éá„Ç¢„ÅÆÊÑèÂ§ñÊÄß

### Ë©ï‰æ°È†ÖÁõÆ\_3
ÊäÄË°ìÁöÑÂÆåÊàêÂ∫¶
#### ÈÖçÂàÜ
5 ÁÇπ
#### ‰∏ª„Å™Ë©ï‰æ°Ëª∏
„Ç≥„Éº„ÉâÂìÅË≥™„ÄÅÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØ„ÅÆÂ¶•ÂΩìÊÄß„ÄÅ„Ç¢„É´„Ç¥„É™„Ç∫„É†Ôºè„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„ÅÆÊ¥óÁ∑¥Â∫¶

### Ë©ï‰æ°È†ÖÁõÆ\_4
Ê©üËÉΩÂÆüË£Ö„ÉªÂÆåÊàêÂ∫¶
#### ÈÖçÂàÜ
5 ÁÇπ
#### ‰∏ª„Å™Ë©ï‰æ°Ëª∏
ÂÆüÈöõ„Å´„ÄåÂãï„Åè„Äç„Åã„Å©„ÅÜ„Åã„ÄÅ‰∏ªË¶ÅÊ©üËÉΩ„Åå‰∏ÄÈÄö„ÇäÂÆüË£Ö„Åï„Çå„Å¶„ÅÑ„Çã„Åã

### Ë©ï‰æ°È†ÖÁõÆ\_5
„É¶„Éº„Ç∂„Éº‰ΩìÈ®ìÔºàUX/UIÔºâ
#### ÈÖçÂàÜ
5 ÁÇπ
#### ‰∏ª„Å™Ë©ï‰æ°Ëª∏
Áõ¥ÊÑüÁöÑ„Å™Êìç‰ΩúÊÄß„ÄÅ„Éá„Ç∂„Ç§„É≥„ÅÆ‰∏ÄË≤´ÊÄß„ÄÅ„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£

### Ë©ï‰æ°È†ÖÁõÆ\_6
ÂÆü‰∏ñÁïå„Ç§„É≥„Éë„ÇØ„ÉàÔºè„Éì„Ç∏„Éç„Çπ‰æ°ÂÄ§
#### ÈÖçÂàÜ
5 ÁÇπ
#### ‰∏ª„Å™Ë©ï‰æ°Ëª∏
Á§æ‰ºöÁöÑÊÑèÁæ©„ÄÅÂ∏ÇÂ†¥Ë¶èÊ®°„ÄÅÂèéÁõä„É¢„Éá„É´„ÅÆË™¨ÂæóÂäõ

### Ë©ï‰æ°È†ÖÁõÆ\_7
„Éâ„Ç≠„É•„É°„É≥„Éà
#### ÈÖçÂàÜ
5 ÁÇπ
#### ‰∏ª„Å™Ë©ï‰æ°Ëª∏
README „ÇÑ API „Éâ„Ç≠„É•„É°„É≥„Éà„ÅÆÂÖÖÂÆüÂ∫¶
`;
}

function buildAnalysisPrompt_simple(repoName, evaluationCriteria) {
  return `
GitHub MCP „Çí‰ΩøÁî®„Åó„Å¶„ÄÅGitHub „É™„Éù„Ç∏„Éà„É™ "${repoName}" „ÇíË©≥Á¥∞„Å´ÂàÜÊûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÂøÖ„ÅöÂÆüÈöõ„Å´„Éï„Ç°„Ç§„É´„ÅÆÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åã„ÇâÂàÜÊûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

[IMPORTANT]
ÂèØËÉΩ„Å™Èôê„ÇäÂ∞ë„Å™„ÅÑ„Çø„Éº„É≥Êï∞„ÅßÂàÜÊûê„ÇíË°å„ÅÜ„Åü„ÇÅ„Å´„ÄÅÂ∑•Â§´„Çí„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
ÂøÖ„Åö‰∏ªË¶Å„Å™„Éï„Ç°„Ç§„É´„ÇíË¶ãÊ•µ„ÇÅ„Çã„Åì„Å®„Åß„Ç≥„É≥„ÉÜ„É≥„ÉÑÂèñÂæó„ÅÆ„Çø„Éº„É≥Êï∞„ÇíÊ∏õ„Çâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
„Åü„Å†„Åó„ÄÅ**ÂàÜÊûêÁµêÊûú„ÅÆÁ≤æÂ∫¶„ÅØËêΩ„Å®„Åó„Å¶„ÅØ„ÅÑ„Åë„Åæ„Åõ„Çì**„ÅÆ„Åß„ÄÅ‰∏ªË¶Å„Å™„Éï„Ç°„Ç§„É´„ÇíË¶ãÊ•µ„ÇÅ„ÅØÊÖéÈáç„Å´Ë°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

**Âà©Áî®ÂèØËÉΩ„Å™„ÉÑ„Éº„É´:**
- mcp__github__get_file_contents: „Éï„Ç°„Ç§„É´„ÅÆÂÜÖÂÆπ„ÇíÂèñÂæó
- mcp__github__search_repositories: „É™„Éù„Ç∏„Éà„É™„ÇíÊ§úÁ¥¢
- mcp__github__search_code: „Ç≥„Éº„Éâ„ÇíÊ§úÁ¥¢
- mcp__github__list_commits: „Ç≥„Éü„ÉÉ„ÉàÂ±•Ê≠¥„ÇíÂèñÂæó
- mcp__github__get_repository_structure: „É™„Éù„Ç∏„Éà„É™„ÅÆÊßãÈÄ†„ÇíÂèñÂæó
- mcp__github__list_repository_contents: „É™„Éù„Ç∏„Éà„É™„ÅÆÂÜÖÂÆπ„ÇíÂèñÂæó

**ÂàÜÊûêÊâãÈ†Ü:**
1. „É™„Éù„Ç∏„Éà„É™„ÅÆÂü∫Êú¨ÊßãÈÄ†„ÇíÂèñÂæó„Åó„Å¶„ÄÅ„Å©„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÈáçË¶Å„Åã„ÇíÂà§Êñ≠
2. README„ÄÅpackage.json„ÄÅrequirements.txtÁ≠â„ÅÆË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇíÁ¢∫Ë™ç
3. src/, lib/, app/Á≠â„ÅÆ„É°„Ç§„É≥„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ‰∏ªË¶Å„Å™„Éï„Ç°„Ç§„É´‰∏ÄË¶ß„ÇíÂèñÂæó
4. ‰∏ªË¶Å„Å™„ÇΩ„Éº„Çπ„Ç≥„Éº„Éâ„Éï„Ç°„Ç§„É´„ÅÆÂÜÖÂÆπ„ÇíË™≠„ÅøÂèñ„Çä
5. Ë©ï‰æ°„Åô„Çã

„ÄåÂ∏ÇÂ†¥ÂÑ™‰ΩçÊÄß„Äç„ÅÆË©ï‰æ°„Å´„Å§„ÅÑ„Å¶„ÅØ„Éû„Éº„Ç±„Çø„ÉºÁõÆÁ∑ö„Åß„Çà„ÇäÂ§ö„Åè„ÅÆ„Éì„Ç∏„Éç„ÇπË¶ñÁÇπ„Åã„ÇâÂàÜÊûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

**Âá∫ÂäõÂΩ¢ÂºèÔºàÊó•Êú¨Ë™û„ÅßÂõûÁ≠îÔºâ:**

{
  "totalScore": 15,                // 0-20 „ÅÆÊï¥Êï∞
  "items": [
    {
      "id": "1",
      "name": "Â∏ÇÂ†¥ÂÑ™‰ΩçÊÄß",        // Ë©ï‰æ°È†ÖÁõÆ„É©„Éô„É´
      "score": 3,                  // Êï¥Êï∞ÔºàÈÖçÂàÜÂÜÖÔºâ
      "positives": "...",        // ËâØ„Åã„Å£„ÅüÁÇπ (1-3 ‰ª∂„Çí„Çè„Åã„Çä„ÇÑ„Åô„ÅÑÊñáÁ´†„ÅßË®òËºâ)
      "negatives": "..."         // ÊîπÂñÑÁÇπ (1-3 ‰ª∂„Çí„Çè„Åã„Çä„ÇÑ„Åô„ÅÑÊñáÁ´†„ÅßË®òËºâ)
    },
    ...
    {
      "id": "4",
      "name": "„É¶„Éº„Ç∂„Éì„É™„ÉÜ„Ç£",
      "score": 5,
      "positives": "...",
      "negatives": "..."
    }
  ],
  "overallComment": "Á∑èÂêàÁöÑ„Å´Ë¶ã„Çã„Å®..." // Á∑èÂêàÁöÑ„Å´Ë¶ã„Å¶„Å©„ÅÜ„Å†„Å£„Åü„Åã„Çí„Çè„Åã„Çä„ÇÑ„Åô„ÅÑÊñáÁ´†„ÅßË®òËºâ„ÄÅ„Åì„Åì„ÅØÈï∑Êñá„Å®„Å™„Å£„Å¶„ÇÇ„ÅÑ„ÅÑ„ÅÆ„ÅßË©≥Á¥∞„Å´Ë®òËºâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
}

## Ë©ï‰æ°È†ÖÁõÆ
### Ë©ï‰æ°È†ÖÁõÆ\_1
Â∏ÇÂ†¥ÂÑ™‰ΩçÊÄß
#### ÈÖçÂàÜ
5 ÁÇπ
#### ‰∏ª„Å™Ë©ï‰æ°Ëª∏
„Åù„ÅÆ„Çµ„Éº„Éì„Çπ„ÅåÂ∏ÇÂ†¥„ÅßÂãù„Å°ÊÆã„Çå„Çã„Åã„Å©„ÅÜ„Åã
- Â∑ÆÂà•Âåñ„Éù„Ç§„É≥„Éà: ‰ºº„Åü„Çµ„Éº„Éì„Çπ„Å®ÊØî„Åπ„Å¶„Äå„Åì„Åì„ÅåÈÅï„ÅÜ„Äç„Å®‰∏ÄÁõÆ„Åß„Çè„Åã„ÇãÂº∑„Åø„Åå„ÅÇ„Çã„Åã
- ÂÆüÁî®ÊÄß: „É¶„Éº„Ç∂„Éº„ÅÆÊÇ©„Åø„ÇíÂÆüÈöõ„Å´Ëß£Ê±∫„Åß„Åç„Çã„Åã„ÄÅ„Åô„Åê„Å´ÂΩπÁ´ã„Å§„Åã
- „Éì„Ç∏„Éç„Çπ„Éù„ÉÜ„É≥„Ç∑„É£„É´: Â∏ÇÂ†¥Ë¶èÊ®°„ÇÑÂèéÁõä„É¢„Éá„É´„ÅåÂ§ß„Åç„Åè‰º∏„Å≥„Çã‰ΩôÂú∞„ÇíÊåÅ„Å£„Å¶„ÅÑ„Çã„Åã

### Ë©ï‰æ°È†ÖÁõÆ\_2
ÊäÄË°ìÂäõ
#### ÈÖçÂàÜ
5 ÁÇπ
#### ‰∏ª„Å™Ë©ï‰æ°Ëª∏
ÊäÄË°ìÈù¢„Åß„Å©„Çå„Å†„ÅëÂÑ™„Çå„Å¶„ÅÑ„Çã„Åã
- AIÊäÄË°ì„ÅÆÂÖàÈÄ≤ÊÄß: ÊúÄÊñ∞„ÉªÁã¨Ëá™„ÅÆ„Ç¢„É´„Ç¥„É™„Ç∫„É†„ÇÑ„É¢„Éá„É´„ÇíÊ¥ªÁî®„Åß„Åç„Å¶„ÅÑ„Çã„Åã
- „Ç≥„Éº„ÉâÂìÅË≥™: „Ç≥„Éº„Éâ„ÅåË™≠„Åø„ÇÑ„Åô„Åè„ÄÅ„ÉÜ„Çπ„Éà„ÇÑ„Éâ„Ç≠„É•„É°„É≥„Éà„ÇÇÊï¥„Å£„Å¶„ÅÑ„Å¶„Éê„Ç∞„ÅåÂ∞ë„Å™„ÅÑ„Åã

### Ë©ï‰æ°È†ÖÁõÆ\_3
ÂÆåÊàêÂ∫¶„ÉªÂÆüË£ÖÂ∫¶
#### ÈÖçÂàÜ
5 ÁÇπ
#### ‰∏ª„Å™Ë©ï‰æ°Ëª∏
- „Ç≥„Ç¢Ê©üËÉΩ„ÅÆÂÆüË£ÖÁä∂Ê≥Å: ‰∏ªË¶ÅÊ©üËÉΩ„ÅåÂãï‰Ωú„Åó„ÄÅ„Éá„É¢„ÇÑ„Éó„É≠„Éà„Çø„Ç§„Éó„ÅßÁ¢∫Ë™ç„Åß„Åç„Çã„Åã
- ÂÆâÂÆöÊÄß: Èï∑ÊôÇÈñì‰Ωø„Å£„Å¶„ÇÇ„ÇØ„É©„ÉÉ„Ç∑„É•„ÇÑÈáçÂ§ß„Å™‰∏çÂÖ∑Âêà„ÅåËµ∑„Åç„Å™„ÅÑ„Åã

### Ë©ï‰æ°È†ÖÁõÆ\_4
„É¶„Éº„Ç∂„Éì„É™„ÉÜ„Ç£
#### ÈÖçÂàÜ
5 ÁÇπ
#### ‰∏ª„Å™Ë©ï‰æ°Ëª∏
‰Ωø„ÅÑ„ÇÑ„Åô„Åè„ÄÅÁ∂ö„Åë„Å¶‰Ωø„ÅÑ„Åü„Åè„Å™„Çã„Åã
- Áõ¥ÊÑüÁöÑ„Å™Êìç‰ΩúÊÄß: Âàù„ÇÅ„Å¶„ÅÆ‰∫∫„Åß„ÇÇËø∑„Çè„ÅöÊìç‰Ωú„Åß„Åç„Çã„Åã
- UI/UX: ÁîªÈù¢„ÅåË¶ã„ÇÑ„Åô„Åè„ÄÅÂÖ•Âäõ„ÇÑÈÅ∑Áßª„Åå„Çπ„É†„Éº„Ç∫„Åß„Çπ„Éà„É¨„Çπ„Åå„Å™„ÅÑ„Åã
`;
}

function buildTestAnalysisPrompt(repoName, evaluationCriteria) {
  const sampleResult = {
    totalScore: 16,
    items: [
      {
        id: "1",
        name: "„ÉÜ„Éº„ÉûÈÅ©ÂêàÂ∫¶",
        score: 4,
        positives:
          "„ÉÜ„Éº„Éû„Å´ÂØæ„Åó„Å¶ÊòéÁ¢∫„Å™Ëß£Ê±∫Á≠ñ„ÇíÊèêÁ§∫„Åó„Å¶„ÅÑ„Çã„ÄÇË¶Å‰ª∂„ÇíÊ∫Ä„Åü„ÅôÂü∫Êú¨Ê©üËÉΩ„ÅåÂÆüË£Ö„Åï„Çå„Å¶„ÅÑ„Çã„ÄÇ",
        negatives: "‰∏ÄÈÉ®„ÅÆÊ©üËÉΩ„Åå„ÉÜ„Éº„Éû„Åã„ÇâÈÄ∏ËÑ±„Åó„Å¶„ÅÑ„ÇãÈÉ®ÂàÜ„Åå„ÅÇ„Çã„ÄÇ",
      },
      {
        id: "2",
        name: "Áã¨ÂâµÊÄß„ÉªÈù©Êñ∞ÊÄß",
        score: 4,
        positives:
          "Êó¢Â≠ò„ÅÆ„ÇΩ„É™„É•„Éº„Ç∑„Éß„É≥„Å®„ÅØÁï∞„Å™„Çã„Ç¢„Éó„É≠„Éº„ÉÅ„ÇíÊé°Áî®„ÄÇÊñ∞„Åó„ÅÑÊäÄË°ì„ÅÆÁµÑ„ÅøÂêà„Çè„Åõ„ÅåÊñ¨Êñ∞„ÄÇ",
        negatives: "‰∏ÄÈÉ®„ÅÆ„Ç¢„Ç§„Éá„Ç¢„ÅØÊó¢Â≠ò„ÅÆ„Çµ„Éº„Éì„Çπ„Å´È°û‰ºº„Åó„Å¶„ÅÑ„Çã„ÄÇ",
      },
      {
        id: "3",
        name: "ÊäÄË°ìÁöÑÂÆåÊàêÂ∫¶",
        score: 3,
        positives:
          "„É¢„ÉÄ„É≥„Å™ÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØ„ÇíÊé°Áî®„ÄÇ„Ç≥„Éº„Éâ„ÅÆÊßãÈÄ†„ÅåÊï¥ÁêÜ„Åï„Çå„Å¶„ÅÑ„Çã„ÄÇ„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„ÅåÈÅ©Âàá„ÄÇ",
        negatives:
          "‰∏ÄÈÉ®„ÅÆ„Ç≥„Éº„Éâ„Å´„É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞„ÅÆ‰ΩôÂú∞„Åå„ÅÇ„Çã„ÄÇ„ÉÜ„Çπ„Éà„Ç´„Éê„É¨„ÉÉ„Ç∏„Åå‰∏çÂçÅÂàÜ„ÄÇ",
      },
      {
        id: "4",
        name: "Ê©üËÉΩÂÆüË£Ö„ÉªÂÆåÊàêÂ∫¶",
        score: 2,
        positives: "‰∏ªË¶ÅÊ©üËÉΩ„ÅØ‰∏ÄÈÄö„ÇäÂãï‰Ωú„Åô„Çã„ÄÇÂü∫Êú¨ÁöÑ„Å™„É¶„Éº„Çπ„Ç±„Éº„Çπ„Çí„Ç´„Éê„Éº„ÄÇ",
        negatives: "„Ç®„ÉÉ„Ç∏„Ç±„Éº„Çπ„ÅÆÂá¶ÁêÜ„Åå‰∏çÂÆåÂÖ®„ÄÇ‰∏ÄÈÉ®„ÅÆÊ©üËÉΩ„Å´„Éê„Ç∞„ÅåÊÆã„Å£„Å¶„ÅÑ„Çã„ÄÇ",
      },
      {
        id: "5",
        name: "„É¶„Éº„Ç∂„Éº‰ΩìÈ®ìÔºàUX/UIÔºâ",
        score: 2,
        positives: "Áõ¥ÊÑüÁöÑ„Å™„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„ÄÇ„É¨„Çπ„Éù„É≥„Ç∑„Éñ„Éá„Ç∂„Ç§„É≥„Å´ÂØæÂøú„ÄÇ",
        negatives:
          "‰∏ÄÈÉ®„ÅÆUIË¶ÅÁ¥†„ÅÆÈÖçÁΩÆ„Åå‰∏çËá™ÁÑ∂„ÄÇ„É¢„Éê„Ç§„É´Áí∞Â¢É„Åß„ÅÆÊìç‰ΩúÊÄß„Å´ÊîπÂñÑ„ÅÆ‰ΩôÂú∞„ÄÇ",
      },
      {
        id: "6",
        name: "ÂÆü‰∏ñÁïå„Ç§„É≥„Éë„ÇØ„ÉàÔºè„Éì„Ç∏„Éç„Çπ‰æ°ÂÄ§",
        score: 1,
        positives: "ÊòéÁ¢∫„Å™„Çø„Éº„Ç≤„ÉÉ„Éà„É¶„Éº„Ç∂„Éº„ÅåÂ≠òÂú®„ÄÇÂÆüÁî®ÁöÑ„Å™ÂïèÈ°åËß£Ê±∫„Å´Ë≤¢ÁåÆ„ÄÇ",
        negatives: "Â∏ÇÂ†¥Ë¶èÊ®°„ÅÆË¶ãÁ©ç„ÇÇ„Çä„Åå‰∏çÊòéÁ¢∫„ÄÇÂèéÁõäÂåñ„É¢„Éá„É´„ÅÆÂÖ∑‰ΩìÊÄß„Å´Ê¨†„Åë„Çã„ÄÇ",
      },
      {
        id: "7",
        name: "„Éâ„Ç≠„É•„É°„É≥„Éà",
        score: 0,
        positives:
          "README„Å´Âü∫Êú¨ÁöÑ„Å™Ë™¨Êòé„Åå„ÅÇ„Çã„ÄÇ„Ç§„É≥„Çπ„Éà„Éº„É´ÊâãÈ†Ü„ÅåË®òËºâ„Åï„Çå„Å¶„ÅÑ„Çã„ÄÇ",
        negatives:
          "API„Éâ„Ç≠„É•„É°„É≥„Éà„Åå‰∏çË∂≥„ÄÇ‰ΩøÁî®‰æã„ÇÑ„Éà„É©„Éñ„É´„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞„Ç¨„Ç§„Éâ„ÅåÊ¨†„Åë„Å¶„ÅÑ„Çã„ÄÇ",
      },
    ],
    overallComment:
      "„Åì„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅØ„ÄÅ„ÉÜ„Éº„Éû„Å´ÂØæ„Åó„Å¶Áã¨ÂâµÁöÑ„Å™„Ç¢„Éó„É≠„Éº„ÉÅ„ÇíÊé°Áî®„Åó„ÄÅÊäÄË°ìÁöÑ„Å´„ÇÇ„Åó„Å£„Åã„Çä„Å®„Åó„ÅüÂü∫Áõ§„ÇíÊåÅ„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇÁâπ„Å´Êñ∞„Åó„ÅÑÊäÄË°ì„ÅÆÁµÑ„ÅøÂêà„Çè„Åõ„Å´„Çà„ÇãÈù©Êñ∞ÊÄß„ÅØÈ´ò„ÅèË©ï‰æ°„Åß„Åç„Åæ„Åô„ÄÇ‰∏ªË¶ÅÊ©üËÉΩ„ÅØÊ¶Ç„Å≠ÂÆüË£Ö„Åï„Çå„Å¶„Åä„Çä„ÄÅ„É¶„Éº„Ç∂„Éº„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„ÇÇÁõ¥ÊÑüÁöÑ„Åß„Åô„ÄÇ„Åü„Å†„Åó„ÄÅÁ¥∞ÈÉ®„ÅÆÂÆåÊàêÂ∫¶„Å´„ÅØ„Åæ„Å†ÊîπÂñÑ„ÅÆ‰ΩôÂú∞„Åå„ÅÇ„Çä„ÄÅÁâπ„Å´„Ç®„ÉÉ„Ç∏„Ç±„Éº„Çπ„ÅÆÂá¶ÁêÜ„ÇÑ„Éâ„Ç≠„É•„É°„É≥„Éà„ÅÆÂÖÖÂÆü„Åå‰ªäÂæå„ÅÆË™≤È°å„Å®„Å™„Çä„Åæ„Åô„ÄÇÂÆü‰∏ñÁïå„Åß„ÅÆÊ¥ªÁî®„ÇíËÄÉ„Åà„Çã„Å®„ÄÅ„Çà„ÇäÂÖ∑‰ΩìÁöÑ„Å™„Éì„Ç∏„Éç„Çπ„É¢„Éá„É´„ÅÆÊ§úË®é„ÇÇÂøÖË¶Å„Åß„Åó„Çá„ÅÜ„ÄÇÂÖ®‰Ωì„Å®„Åó„Å¶„ÄÅ„Éè„ÉÉ„Ç´„ÇΩ„É≥„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Å®„Åó„Å¶„ÅØËâØÂ•Ω„Å™ÂÆåÊàêÂ∫¶„ÇíÁ§∫„Åó„Å¶„ÅÑ„Åæ„Åô„Åå„ÄÅÂÆüÁî®Âåñ„Å´Âêë„Åë„Å¶„ÅØ„Åï„Çâ„Å™„Çã„Éñ„É©„ÉÉ„Ç∑„É•„Ç¢„ÉÉ„Éó„ÅåÂøÖË¶Å„Åß„Åô„ÄÇÔºà„Åì„Çå„ÅØ„Éá„Éê„ÉÉ„Ç∞Áî®„ÅÆ„Çµ„É≥„Éó„É´Ë©ï‰æ°„Åß„ÅôÔºâ",
  };

  return [
    "„Åì„ÅÆ„Éó„É≠„É≥„Éó„Éà„ÅØ„Éá„Éê„ÉÉ„Ç∞Áî®„Åß„Åô„ÄÇÂÆüÈöõ„ÅÆ„É™„Éù„Ç∏„Éà„É™ÂàÜÊûê„ÅØË°å„Çè„Åö„ÄÅ‰ª•‰∏ã„ÅÆ„Çµ„É≥„Éó„É´Ë©ï‰æ°ÁµêÊûú„Çí„Åù„ÅÆ„Åæ„ÅæËøî„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
    "",
    `„É™„Éù„Ç∏„Éà„É™Âêç: "${repoName}"`,
    "",
    "**‰ª•‰∏ã„ÅÆJSON„Çí„Åù„ÅÆ„Åæ„ÅæËøî„Åó„Å¶„Åè„Å†„Åï„ÅÑ:**",
    "",
    JSON.stringify(sampleResult, null, 2),
  ].join("\n");
}

function extractJsonFromText(text) {
  try {
    if (typeof text !== "string") return null;

    // Direct JSON parsing
    if (text.trim().startsWith("{")) {
      return JSON.parse(text);
    }

    // Extract JSON with regex
    const jsonMatch = text.match(/\{[\s\S]*"totalScore"[\s\S]*\}/);
    if (jsonMatch) {
      return JSON.parse(jsonMatch[0]);
    }

    // Extract from code blocks
    const codeBlockMatch = text.match(/```json\s*([\s\S]*?)\s*```/);
    if (codeBlockMatch && codeBlockMatch[1]) {
      return JSON.parse(codeBlockMatch[1]);
    }

    // Extract from first { to last }
    const firstBrace = text.indexOf("{");
    const lastBrace = text.lastIndexOf("}");
    if (firstBrace !== -1 && lastBrace !== -1 && lastBrace > firstBrace) {
      const jsonString = text.substring(firstBrace, lastBrace + 1);
      return JSON.parse(jsonString);
    }

    return null;
  } catch (error) {
    console.error("JSON parsing error:", error);
    return null;
  }
}

function validateEvaluationResult(data) {
  if (!data || typeof data !== "object") {
    console.error("‚ùå Validation failed: data is not an object");
    return false;
  }

  // Check totalScore (0-20 for buildAnalysisPrompt_simple)
  if (
    typeof data.totalScore !== "number" ||
    data.totalScore < 0 ||
    data.totalScore > 20
  ) {
    console.error(
      `‚ùå Validation failed: totalScore is invalid (${data.totalScore}), expected 0-20`
    );
    return false;
  }

  // Check items array (4 items for buildAnalysisPrompt_simple)
  if (!Array.isArray(data.items) || data.items.length !== 4) {
    console.error(
      `‚ùå Validation failed: items array length is ${
        data.items?.length || 0
      }, expected 4`
    );
    return false;
  }

  // Validate each item (max score should be 5)
  for (const item of data.items) {
    if (
      !item.id ||
      !item.name ||
      typeof item.score !== "number" ||
      item.score < 0 ||
      item.score > 5 ||
      !item.positives ||
      !item.negatives
    ) {
      console.error(
        "‚ùå Validation failed: item missing required fields or score out of range (0-5)",
        item
      );
      return false;
    }
  }

  // Check overallComment
  if (typeof data.overallComment !== "string") {
    console.error("‚ùå Validation failed: overallComment is not a string");
    return false;
  }

  console.log("‚úÖ Evaluation result validation passed");
  return true;
}

async function saveEvaluationResult(
  jobId,
  userId,
  repositoryName,
  evaluationData,
  metadata
) {
  console.log(`üóÑÔ∏è Calling save_evaluation_result RPC with params:`, {
    p_job_id: jobId,
    p_user_id: userId,
    p_repository_name: repositoryName,
    p_evaluation_data: evaluationData ? "present" : "missing",
    p_processing_metadata: metadata ? "present" : "missing",
  });

  const { data, error } = await supabase.rpc("save_evaluation_result", {
    p_job_id: jobId,
    p_user_id: userId,
    p_repository_name: repositoryName,
    p_evaluation_data: evaluationData,
    p_processing_metadata: metadata,
  });

  console.log(`üóÑÔ∏è RPC save_evaluation_result response:`, { data, error });

  if (error) {
    console.error("‚ùå Failed to save evaluation result:", error);
    console.error(
      "‚ùå Error details:",
      error.message,
      error.code,
      error.details
    );
    throw error;
  }

  return data;
}

async function ensureJobStatus(jobId, userId, payload) {
  // First try to insert the job status record if it doesn't exist
  const { error: insertError } = await supabase.from("job_status").insert({
    id: jobId,
    status: "processing",
    payload: payload,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  });

  if (insertError) {
    // If insert fails due to conflict, that's fine - record already exists
    if (insertError.code !== "23505") {
      // Not a unique constraint violation
      console.error("Failed to ensure job status record:", insertError);
    }
  }
}

async function updateJobStatus(jobId, status, result = null) {
  console.log(
    `üìù Updating job_status table for job ${jobId} with status "${status}"`
  );
  console.log(`üìù Result data:`, result);

  const { data, error } = await supabase
    .from("job_status")
    .update({
      status,
      result,
      updated_at: new Date().toISOString(),
    })
    .eq("id", jobId);

  console.log(`üìù Job status update response:`, { data, error });

  if (error) {
    console.error("‚ùå Failed to update job status:", error);
    console.error(
      "‚ùå Job status error details:",
      error.message,
      error.code,
      error.details
    );
    throw error;
  }

  return data;
}

// Start server
console.log(`üîç DEBUG: About to start server on port ${config.server.port}`);
console.log(`üîç DEBUG: Config object:`, JSON.stringify(config, null, 2));

const server = app.listen(config.server.port, "0.0.0.0", (err) => {
  if (err) {
    console.error(`‚ùå Server failed to start:`, err);
    process.exit(1);
  }
  console.log(`üöÄ ClaudeCode Worker starting...`);
  console.log(`üìä Environment: ${config.server.nodeEnv}`);
  console.log(`üåê Port: ${config.server.port}`);
  console.log(`üè• Health check: http://localhost:${config.server.port}/health`);
  console.log(`üîß Max turns per analysis: ${config.processing.maxTurns}`);
  console.log(`‚è±Ô∏è  Analysis timeout: ${config.processing.timeoutMs}ms`);
  console.log(`‚úÖ ClaudeCode Worker ready!`);
  console.log(`üîç DEBUG: Server listening:`, server.listening);
  console.log(`üîç DEBUG: Server address:`, server.address());
});

server.on("error", (err) => {
  console.error(`‚ùå Server error:`, err);
});

server.on("listening", () => {
  console.log(`üéØ Server is now listening on port ${config.server.port}`);
});
